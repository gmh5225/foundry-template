// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.28;

import "forge-std/Script.sol";
import "forge-std/console2.sol";
import "../src/Bank.sol";
import "@openzeppelin/contracts/utils/Create2.sol";

contract DeployScript is Script {
    bytes32 constant SALT = bytes32(uint256(0x0000000000000000000000000000000000000000d3bf2663da51c10215000003));

    // contract bytecode
    // forge inspect src/Bank.sol:Bank bytecode > Bank.bytecode.txt
    bytes constant BYTECODE =
        hex"6080806040523460835733156070575f8054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3600180546001600160a01b0319163317905561081390816100888239f35b631e4fbdf760e01b5f525f60045260245ffd5b5f80fdfe60806040526004361015610022575b3615610018575f80fd5b6100206105ae565b005b5f3560e01c8062f55d9d1461053257806312065fe01461051757806327e235e3146101c45780632e1a7d4d146103a85780633086107814610366578063715018a6146102ea57806381454f711461023e5780638da5cb5b1461020c578063b8ba16fd146101c4578063d0e30db0146101b1578063f2fde38b146100e05763f851a4400361000e57346100dc575f6003193601126100dc57602073ffffffffffffffffffffffffffffffffffffffff60015416604051908152f35b5f80fd5b346100dc5760206003193601126100dc5760043573ffffffffffffffffffffffffffffffffffffffff81168091036100dc5761011a6107ba565b80156101855773ffffffffffffffffffffffffffffffffffffffff5f54827fffffffffffffffffffffffff00000000000000000000000000000000000000008216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b7f1e4fbdf7000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b5f6003193601126100dc576100206105ae565b346100dc5760206003193601126100dc5760043573ffffffffffffffffffffffffffffffffffffffff81168091036100dc575f526002602052602060405f2054604051908152f35b346100dc575f6003193601126100dc57602073ffffffffffffffffffffffffffffffffffffffff5f5416604051908152f35b346100dc575f6003193601126100dc5760608060405161025e828261056d565b36903760405160035f825b600382106102be5750505061027e828261056d565b604051905f825b6003821061029257505050f35b60208060019273ffffffffffffffffffffffffffffffffffffffff865116815201930191019091610285565b60016020819273ffffffffffffffffffffffffffffffffffffffff865416815201930191019091610269565b346100dc575f6003193601126100dc576103026107ba565b5f73ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346100dc5760206003193601126100dc5760043560038110156100dc5773ffffffffffffffffffffffffffffffffffffffff6020916003015416604051908152f35b346100dc5760206003193601126100dc5760043573ffffffffffffffffffffffffffffffffffffffff60015416908133036104ef574790818111156104e75750905b816103f157005b8147106104b7575f80809381935af13d156104b2573d67ffffffffffffffff8111610485576040519061044c60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018361056d565b81525f60203d92013e5b1561045d57005b7fd6bda275000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610456565b50477fcf479181000000000000000000000000000000000000000000000000000000005f5260045260245260445ffd5b9050906103ea565b7f7af19b36000000000000000000000000000000000000000000000000000000005f5260045ffd5b346100dc575f6003193601126100dc57602047604051908152f35b346100dc5760206003193601126100dc5760043573ffffffffffffffffffffffffffffffffffffffff811681036100dc5761056b6107ba565bff5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761048557604052565b341561079257335f52600260205260405f2080549034820180921161075e5755335f52600260205260405f20546003905f5b600381101561078b5773ffffffffffffffffffffffffffffffffffffffff8160030154165f52600260205260405f2054821161061e576001016105e0565b9150505b600381108061062f575050565b60025b82811161069957501561066c5760030180547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811161075e576003111561066c5773ffffffffffffffffffffffffffffffffffffffff600282015416600382101561066c5773ffffffffffffffffffffffffffffffffffffffff8260030191167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055801561075e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610632565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5050610622565b7fadde1af4000000000000000000000000000000000000000000000000000000005f5260045ffd5b73ffffffffffffffffffffffffffffffffffffffff5f541633036107da57565b7f118cdaa7000000000000000000000000000000000000000000000000000000005f523360045260245ffdfea164736f6c634300081c000a";

    // no Contract Creation Code
    // https://sepolia.arbiscan.io/address/0xf4fac7a0edd47fae667e547ea8e99df4580c0b4c

    // has Contract Creation Code
    // https://sepolia.etherscan.io/address/0xf4fac7a0edd47fae667e547ea8e99df4580c0b4c
    function deploy(bytes memory _bytecode, bytes32 _salt) public returns (address addr) {
        assembly {
            addr :=
                create2(
                    0, // eth amount
                    add(_bytecode, 0x20), // bytecode start
                    mload(_bytecode), // bytecode length
                    _salt // salt value
                )
            if iszero(extcodesize(addr)) { revert(0, 0) }
        }
    }

    function run() public {
        // TODO: encrypt your private key
        uint256 deployerPrivateKey = vm.envUint("SEPOLIA_WALLET_PRIVATE_KEY");
        address deployerAddress = vm.addr(deployerPrivateKey);

        vm.startBroadcast(deployerPrivateKey);

        Bank newBank = new Bank{ salt: SALT }(deployerAddress);
        console2.log("Bank deployed to:", address(newBank));

        // send 0.00001 ETH (10000000000000 wei)
        // address addr = Create2.deploy(0, SALT, BYTECODE);
        // address addr = deploy(BYTECODE, SALT);
        // https://sepolia.arbiscan.io/address/0x5db8225dea62dd50fa197b5847287fe792272e87#code
        // console2.log("Bank deployed to:", addr);
        console2.log("Deployed by:", deployerAddress);

        vm.stopBroadcast();
    }

    // The contract can receive ether to enable `payable` constructor calls if needed.
    receive() external payable { }
}
